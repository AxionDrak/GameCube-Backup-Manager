<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.Text" xml:space="preserve">
    <value>Sobre...</value>
  </data>
  <data name="Game_GenerateTreeView_GenerateTreeView___error__dir2dir_not_found" xml:space="preserve">
    <value>GenerateTreeView() error: dir2dir not found</value>
  </data>
  <data name="labelCompanyName.Text" xml:space="preserve">
    <value>Nome da Companhia</value>
  </data>
  <data name="labelCopyright.Text" xml:space="preserve">
    <value>Copyright</value>
  </data>
  <data name="labelProductName.Text" xml:space="preserve">
    <value>Nome do Produto</value>
  </data>
  <data name="labelVersion.Text" xml:space="preserve">
    <value>Versão</value>
  </data>
  <data name="lbl_DataAtualizacao.Text" xml:space="preserve">
    <value>.</value>
  </data>
  <data name="lblAboutCurrentLanguage.Text" xml:space="preserve">
    <value>Idioma Atual: </value>
  </data>
  <data name="lblAboutProgramName.Text" xml:space="preserve">
    <value>GameCube Backup Manager</value>
  </data>
  <data name="lblAboutTranslator.Text" xml:space="preserve">
    <value>Tradutor: </value>
  </data>
  <data name="lblAboutVersion.Text" xml:space="preserve">
    <value>.</value>
  </data>
  <data name="okButton.Text" xml:space="preserve">
    <value>&amp;OK</value>
  </data>
  <data name="rtbAboutDonations.Text" xml:space="preserve">
    <value>GameCube Backup Manager é um software gratuito.

Muito esforço foi e será feito para torná-lo o mais estável e rico em recursos possível. Se você achar útil e quiser mostrar seu apreço, sinta-se à vontade para me enviar um dólar ou dois. Qualquer dinheiro recebido vai me ajudar muito!

Você também pode enviar doações para laetemn@gmail.com via PayPal se o link acima não funcionar para você.

Não se esqueça de me enviar um e-mail para que eu possa agradecer.</value>
  </data>
  <data name="rtbAboutGameTDB.Text" xml:space="preserve">
    <value>GameTDB é um banco de dados colaborativo de jogos para qualquer pessoa contribuir e qualquer pessoa usar em qualquer projeto de jogo.

No site você pode navegar no banco de dados, baixá-lo e contribuir com ele adicionando informações do jogo e fazendo upload de capas.

No seu Wii ou no seu computador, você pode usar o GameTDB para fazer o seguinte:

- exibir títulos apropriados para o seu jogo ("Wii Sports" em vez de "SPORTS PACK FOR REVOLUTION"), sem nunca ter que renomear você mesmo.

- exiba a arte da capa que corresponde à sua região.

- exibir informações adicionais sobre seus jogos (jogadores, modos online, acessórios, editora, desenvolvedora...).

- se você tiver uma grande biblioteca, você classifica os jogos a frio, por exemplo, pelo número de jogadores para agrupar rapidamente seus títulos multijogador.

- procure jogos de GameCube e Wii, por editora, desenvolvedora, que correspondam a uma determinada classificação ou lançados em um determinado ano.</value>
  </data>
  <data name="rtbAboutThanks.Text" xml:space="preserve">
    <value>Obrigado às seguintes pessoas pelos testes, traduções e ajuda geral durante o desenvolvimento:

- Sjohnson1021 - Desenvolvedor e Mantenedor
- Valclark Junior - Testes / Experiência do usuário
- Dolphin Emulator Team - Informações do GameCube / Wii / RVZ
- Wiimm 
- WIT (Wiimms ISO Tools)
- Wii Brew

Um agradecimento especial às pessoas que ajudaram a traduzir este programa para os mais diversos idiomas, permitindo que pessoas de todo o mundo possam usufruir de seus recursos. 

Além de todos os envolvidos na comunidade de preservação de jogos.


Além de todos os envolvidos na comunidade de preservação de jogos.</value>
  </data>
  <data name="tbDonate.Text" xml:space="preserve">
    <value>Doações</value>
  </data>
  <data name="tbGameTDB.Text" xml:space="preserve">
    <value>GameTDB</value>
  </data>
  <data name="tbThanks.Text" xml:space="preserve">
    <value>Agradecimentos</value>
  </data>
  <data name="tbTranslator.Text" xml:space="preserve">
    <value>Tradução</value>
  </data>
  <data name="textBoxDescription.Text" xml:space="preserve">
    <value>Descrição</value>
  </data>
  <data name="tpGCBM.Text" xml:space="preserve">
    <value>GCBM</value>
  </data>
</root>